import { ICypressConfiguration } from "@badeball/cypress-configuration";
export declare function stringToMaybeBoolean(value: string): boolean | undefined;
export interface IPreprocessorConfiguration {
    readonly stepDefinitions: string | string[];
    readonly messages?: {
        enabled: boolean;
        output?: string;
    };
    readonly json?: {
        args?: string[];
        enabled: boolean;
        formatter?: string;
        output?: string;
    };
    readonly filterSpecs?: boolean;
    readonly omitFiltered?: boolean;
}
export interface IEnvironmentOverrides {
    stepDefinitions?: string | string[];
    messagesEnabled?: boolean;
    messagesOutput?: string;
    jsonArgs?: string[];
    jsonEnabled?: boolean;
    jsonFormatter?: string;
    jsonOutput?: string;
    filterSpecs?: boolean;
    omitFiltered?: boolean;
}
export declare const DEFAULT_PRE_10_STEP_DEFINITIONS: string[];
export declare const DEFAULT_POST_10_STEP_DEFINITIONS: string[];
export declare class PreprocessorConfiguration implements IPreprocessorConfiguration {
    private explicitValues;
    private environmentOverrides;
    private cypressConfiguration;
    constructor(explicitValues: Partial<IPreprocessorConfiguration>, environmentOverrides: IEnvironmentOverrides, cypressConfiguration: ICypressConfiguration);
    get stepDefinitions(): string | string[];
    get messages(): {
        enabled: boolean;
        output: string;
    };
    get json(): {
        args: string[];
        enabled: boolean;
        formatter: string;
        output: string;
    };
    get filterSpecs(): boolean;
    get omitFiltered(): boolean;
}
export declare type ConfigurationFileResolver = (projectRoot: string) => any | Promise<any>;
export declare function resolve(cypressConfig: ICypressConfiguration, environment: Record<string, unknown>, configurationFileResolver?: ConfigurationFileResolver): Promise<PreprocessorConfiguration>;
